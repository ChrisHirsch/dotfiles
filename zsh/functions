# Forwarding your .ssh/sshrc file and sourcing it as .bashrc
# A function sudoi is defined on the remote machine, used
# instead of sudo -i, to run a shell as the specified user,
# or root as default, and source the local .ssh/sshrc.
# From https://gist.github.com/dafta/26bec7ade1ca299926b5bc47064aeed0

function ssh() {
        tmprc=$(/usr/bin/ssh "$@" "mktemp" 2>/dev/null)
        rsync ~/.ssh/sshrc "$1:$tmprc" >/dev/null 2>&1 
        echo "function sudoi() { sudo -u \"\${1:-root}\" bash --rcfile \"$tmprc\"; }" | /usr/bin/ssh "$@" "cat - >> \"$tmprc\"" >/dev/null 2>&1
        /usr/bin/ssh -t "$@" "chmod a+r \"$tmprc\"; bash --rcfile \"$tmprc\" ; rm \"$tmprc\""
}

# Backgrounds a echo null so we don't timeout on the shell
function kexec() {
  k exec -ti $1 -- /bin/bash -c "while :; do sleep 10; echo -ne '\0' >&2; done & bash"
}

# Bash realpath
function realpath() {
 return ${(%):=%N}
}

# gc_count_hot applogdefaultnoc
function gc_count_hot() {
  gcloud compute --project wf-gcp-us-lm-prod instances list --filter="name ~ eshot.*$1" --sort-by='name' --format="table(name)" --quiet | grep -v NAME | wc -l
}

# gc_count_cold applogdefaultnoc
function gc_count_cold() {
  gcloud compute --project wf-gcp-us-lm-prod instances list --filter="name ~ escold.*$1" --sort-by='name' --format="table(name)" --quiet | grep -v NAME | wc -l
}

# Tail AWS CloudWatch Logs
function aws_get_log_groups() {
  aws logs describe-log-groups | jq '.logGroups[].logGroupName'
}

# Gets your current sso creds, and exports them to the environment so you don't have to use --profile in each command
function aws_export_sso_creds() {
  profile=dev-dev
  if [ $# -eq 0 ]; then
    printf "No profile specified, using dev-dev profile...\n"
    aws sso login --profile $profile
  else
    profile=$1
    printf "Using supplied profile $profile...\n"
    aws sso login --profile $profile
  fi

  printf "Getting creds for $profile...\n"

  eval "$(aws configure export-credentials --profile $profile --format env)"
}

# Unsets the previously exported creds from the environment
function aws_unexport_sso_creds() {
  unset AWS_SECRET_ACCESS_KEY
  unset AWS_ACCESS_KEY_ID
  unset AWS_SESSION_TOKEN
}

# Tail AWS CloudWatch Logs
# Setup in ~/.site
function aws_tail_log_groups() {
  # ie /ecs/service-api
  LOG_GROUP=$AWS_LOG_GROUP
  SINCE="15m"
  FILTER_PATTERN=""
  FILTER=""

  # If no arguments were provided, give an example usage but continue with defaults
  if [ $# -eq 0 ]; then
    printf "No arguments supplied...continuing with defaults...\n"
    printf "Example usage:  aws_tail_log_groups $AWS_LOG_GROUP Invalid 1m\n\n"
  fi 

  if [ -n "$1" ]; then
    LOG_GROUP="$1"
  fi
  if [ -n "$2" ]; then
    FILTER_PATTERN="--filter-pattern"
    FILTER="$2"
  fi
  if [ -n "$3" ]; then
    SINCE="$3"
  fi

  printf "LOG_GROUP=$LOG_GROUP\n"
  printf "FILTER_PATTERN=$FILTER_PATTERN\n"
  printf "FILTER=$FILTER\n"
  printf "SINCE=$SINCE\n"
  aws logs tail ${LOG_GROUP} --follow --format short ${FILTER_PATTERN} ${FILTER} --since ${SINCE}
}
