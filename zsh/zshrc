# Enable Powerlevel10k instant prompt. Should stay close to the top of ~/.zshrc.
# Initialization code that may require console input (password prompts, [y/n]
# confirmations, etc.) must go above this block; everything else may go below.
if [[ -r "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh" ]]; then
  source "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh"
fi

# Path to your oh-my-zsh installation.
export ZSH=$HOME/.oh-my-zsh


# Depending on if we're OSX AND if we're ARM or Intel set our path for homebrew
export PATH="$HOME/bin:"
if [[ "$OSTYPE" == "darwin"* ]]; then
  if [[ "$CPUTYPE" == "arm64" ]]; then
	  #HOMEBREW_PREFIX=/opt/homebrew
	  HOMEBREW_PREFIX=/usr/local
  else
	  HOMEBREW_PREFIX=/usr/local
  fi
fi
export PATH="$PATH:$HOMEBREW_PREFIX/bin:/opt/local/sbin:/usr/bin:/bin:/usr/sbin:/sbin:/opt/X11/bin:/usr/local/git/bin:~/src/go/bin:/usr/local/bin:/sw/bin:/opt/puppetlabs/pdk/bin:~/bin:/usr/local/opt/openjdk/jre/bin"

export FZF_BASE=$HOMEBREW_PREFIX/opt/fzf
[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh

# Update powerlevel10k
# git -C $ZSH_CUSTOM/themes/powerlevel10k pull
# upgrade_oh_my_zsh

# Set name of the theme to load.
# Look in ~/.oh-my-zsh/themes/
# Optionally, if you set this to "random", it'll load a random theme each
# time that oh-my-zsh is loaded.
#ZSH_THEME="robbyrussell"
#ZSH_THEME="agnoster"
#ZSH_THEME="powerlevel9k/powerlevel9k"
ZSH_THEME="powerlevel10k/powerlevel10k"

# https://github.com/Powerlevel9k/powerlevel9k/wiki/Stylizing-Your-Prompt
#POWERLEVEL9K_PROMPT_ON_NEWLINE=true
#POWERLEVEL9K_LEFT_PROMPT_ELEMENTS=(dir newline vcs)
# Show all the icons
#We provide a function that will print every icon name in the theme. To get a full list of icons 
# just type get_icon_names in your terminal.
#POWERLEVEL9K_LEFT_PROMPT_ELEMENTS=(icons_test)

# Uncomment the following line to use case-sensitive completion.
CASE_SENSITIVE="true"

# Uncomment the following line to use hyphen-insensitive completion. Case
# sensitive completion must be off. _ and - will be interchangeable.
# HYPHEN_INSENSITIVE="true"

# Uncomment the following line to disable bi-weekly auto-update checks.
DISABLE_AUTO_UPDATE="false"
DISABLE_UPDATE_PROMPT="false"

# Uncomment the following line to change how often to auto-update (in days).
# export UPDATE_ZSH_DAYS=13

# Uncomment the following line to disable colors in ls.
# DISABLE_LS_COLORS="true"

# Uncomment the following line to disable auto-setting terminal title.
# DISABLE_AUTO_TITLE="true"

# Uncomment the following line to enable command auto-correction.
# ENABLE_CORRECTION="true"

# Uncomment the following line to display red dots whilst waiting for completion.
COMPLETION_WAITING_DOTS="true"

# Uncomment the following line if you want to disable marking untracked files
# under VCS as dirty. This makes repository status check for large repositories
# much, much faster.
# DISABLE_UNTRACKED_FILES_DIRTY="true"

# Uncomment the following line if you want to change the command execution time
# stamp shown in the history command output.
# The optional three formats: "mm/dd/yyyy"|"dd.mm.yyyy"|"yyyy-mm-dd"
# HIST_STAMPS="mm/dd/yyyy"

# Would you like to use another custom folder than $ZSH/custom?
# ZSH_CUSTOM=/path/to/new-custom-folder

# Which plugins would you like to load? (plugins can be found in ~/.oh-my-zsh/plugins/*)
# Custom plugins may be added to ~/.oh-my-zsh/custom/plugins/
# Example format: plugins=(rails git textmate ruby lighthouse)
# Add wisely, as too many plugins slow down shell startup.
# Usage examples: https://travis.media/top-10-oh-my-zsh-plugins-for-productive-developers/
plugins=(
  #1password
  ansible
  autopep8
  aws 
  brew
  common-aliases 
  colorize
  copypath
  dirhistory
  docker 
  docker-compose
  fzf 
  gcloud 
  git 
  gitfast 
  git-extras 
  golang
  helm
  #history 
  iterm2
  jira
  oc 
  macos
  mvn
  npm
  pep8
  pip
  pnpm
  poetry
  python
  sudo
  kubectl 
  kube-ps1 
  terraform 
  tmux 
  vagrant
  vi-mode
  vscode
  web-search
  zsh-completions
  zsh-autosuggestions
)


source $ZSH/oh-my-zsh.sh

# You may need to manually set your language environment
# export LANG=en_US.UTF-8

# Preferred editor for local and remote sessions
# if [[ -n $SSH_CONNECTION ]]; then
#   export EDITOR='vim'
# else
#   export EDITOR='mvim'
# fi

# Compilation flags
# export ARCHFLAGS="-arch x86_64"

# ssh
# export SSH_KEY_PATH="~/.ssh/dsa_id"

export JAVA_HOME=/usr/local/opt/openjdk



# For mongodb
PATH=$PATH:$HOME/src/mongodb/mongodb-osx-x86_64-2.2.0/bin
#alias cd=pushd
#alias cdp=popd
alias ll='ls -la'
set -o vi

#Miami ISO stuff
alias m1p='ssh -D 1080 chirsch@161.69.46.16'
alias chrom='/Applications/Google\ Chrome.app/Contents/MacOS/Google\ Chrome --proxy-server="socks5://localhost:1080"'

# MacPorts Installer addition on 2014-04-30_at_17:32:58: adding an appropriate PATH variable for use with MacPorts.
export PATH=/opt/local/bin:/opt/local/sbin:$PATH
# Finished adapting your PATH environment variable for use with MacPorts.

# For packer
export PATH=~/Downloads/packer:$PATH

# For Go
export GOPATH="$HOME/src/go/"
if [[ "$OSTYPE" == "darwin"* ]]; then
  if [[ "$CPUTYPE" == "x86_64" ]]; then
    GOROOT=/usr/local/opt/go/libexec
  else
    #GOROOT=/opt/homebrew/opt/go/libexec
    GOROOT=/opt/homebrew/bin/go
  fi
else
  GOROOT=/usr/local/go/libexec
fi

# As of CY2023, for any modern Go installation, do not set/export GOROOT.
#export GOROOT=/usr/local/go
#export PATH=$PATH:/usr/local/go/bin

# For NVM NodeJS Version Manager
export NVM_DIR="$HOME/.nvm"
    [ -s "$HOMEBREW_PREFIX/opt/nvm/nvm.sh" ] && \. "$HOMEBREW_PREFIX/opt/nvm/nvm.sh" # This loads nvm
    [ -s "$HOMEBREW_PREFIX/opt/nvm/etc/bash_completion.d/nvm" ] && \. "$HOMEBREW_PREFIX/opt/nvm/etc/bash_completion.d/nvm" # This loads nvm bash_completion

# fshow - git commit browser
fshow() {
  git log --graph --color=always \
      --format="%C(auto)%h%d %s %C(black)%C(bold)%cr" "$@" |
  fzf --ansi --no-sort --reverse --tiebreak=index --bind=ctrl-s:toggle-sort \
      --bind "ctrl-m:execute:
                (grep -o '[a-f0-9]\{7\}' | head -1 |
                xargs -I % sh -c 'git show --color=always % | less -R') << 'FZF-EOF'
                {}
FZF-EOF"
}

function kube-toggle() {
  if (( ${+POWERLEVEL9K_KUBECONTEXT_SHOW_ON_COMMAND} )); then
    unset POWERLEVEL9K_KUBECONTEXT_SHOW_ON_COMMAND
  else
    POWERLEVEL9K_KUBECONTEXT_SHOW_ON_COMMAND='kubectl|helm|kubens|kubectx|oc|istioctl|kogito'
  fi
  p10k reload
  if zle; then
    zle push-input
    zle accept-line
  fi
}

# From Ben
# Quickly work with DDC environments
ddc() {
  echo "entering $1"
  cd ~/src/$DDC_SITE/docker/ddc-$1/
  eval "$(<env.sh)"
  cd -
}

alias d="docker"
# Docker Linter https://github.com/goodwithtech/dockle
alias dl="dockle"
alias g='git'
# https://hub.github.com/
# Makes git github compatible
alias h=hub
alias k="kubectl"
alias ke='kubectl get events --sort-by="{.lastTimestamp}"'
alias ks="kubens"
alias kx="kubectx"
alias t="docker inspect -f '{{.Status.ContainerStatus.ContainerID}}' "
alias ga="git add -p"
alias rs='rsync -av --progress'
alias ta='terraform apply'
alias tp='terraform plan'
alias cat="bat"
#alias bat="batcat"
alias cssh="i2cssh"
alias glog=fshow
#alias htop=glances
alias hackthegibson="docker ps -f name='^ucp-'"
# Show wide view of PS
alias psw="ps -eafwww"
alias scripts="cd $HOME/src/$DDC_SITE/des/des-scripts/scripts"
# For SSH tunneling
alias tunnel="sshuttle --dns -r $USER@$JUMPHOST 0/0"


# Start/Stop indexing on all volumes
alias spotlightoff='sudo mdutil -a -i off'
alias spotlighton='sudo mdutil -a -i on'

# load/unload indexing on all volumes
alias spotlightunload='sudo launchctl unload -w \
	 /System/Library/LaunchDaemons/com.apple.metadata.mds.plist'
alias spotlightload='sudo launchctl load -w \
	 /System/Library/LaunchDaemons/com.apple.metadata.mds.plist'

#alias vi='/usr/local/bin/vim'
# To get ctrl-r history search
bindkey "^R" history-incremental-search-backward

# use esc-v to edit the vim command line IN vim
bindkey -M vicmd v edit-command-line




#alias jobs='print "Remember %n to fg!\n";jobs'

export PATH="$PATH:$HOME/.rvm/bin" # Add RVM to PATH for scripting
#PS1="%{%f%b%k%}$(build_prompt) 🐓💩🔜 "

export PATH="$PATH:/Applications/Visual Studio Code.app/Contents/Resources/app/bin"




# Needed so that pgp prompt doesn't try for GUI
export GPG_TTY=$(tty)


# Source the dotconfig aliases file AND overwrite that with any local aliases
[ -f ~/.config/aliases ] && source ~/.config/aliases
[ -f ~/.aliases ] && source ~/.aliases

# Source the local site file to setup vars depending on which computer/customer/environment we're in
[ -f ~/.site ] && source ~/.site

# Source the functions file (BASH/ZSH)
[ -f ~/.functions ] && source ~/.functions

# To customize prompt, run `p10k configure` or edit ~/.p10k.zsh.
[[ ! -f ~/.p10k.zsh ]] || source ~/.p10k.zsh

# Bring in tab completion for aws cli via fzf
# https://medium.com/@herryhan2435/using-aws-cli-with-fzf-on-ohmyzsh-ec995ee3784f
[[ ! -f ~/.oh-my-zsh/custom/plugins/fzf-tab-completion ]] || source ~/.oh-my-zsh/custom/plugins/fzf-tab-completion/zsh/fzf-zsh-completion.sh
# only aws command completion
#zstyle ':completion:*:*:aws' fzf-search-display true
# or for everything
zstyle ':completion:*' fzf-search-display true


export LDFLAGS="-L/usr/local/opt/zlib/lib -L/usr/local/opt/sqlite/lib"
export CPPFLAGS="-I/usr/local/opt/zlib/include -I/usr/local/opt/sqlite/include"

export VIRTUALENVWRAPPER_PYTHON=/usr/bin/python3
export WORKON_HOME=~/.virtualenvs
export VIRTUALENVWRAPPER_VIRTUALENV=~/.pyenv/versions/3.7.3/bin/virtualenv
	  
source $HOMEBREW_PREFIX/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh

# Get Brew setup
eval "$($HOMEBREW_PREFIX/bin/brew shellenv)"
# https://formulae.brew.sh/formula/zsh-completions
# compaudit | xargs chmod g-w (if getting a perms issue)
if type brew &>/dev/null; then
     FPATH=$(brew --prefix)/share/zsh-completions:$FPATH

     autoload -Uz compinit
     compinit
fi


eval "$(pyenv init -)"
# Need to install https://github.com/commitizen/cz-cli

### MANAGED BY RANCHER DESKTOP START (DO NOT EDIT)
export PATH="/Users/chirsch/.rd/bin:$PATH"
### MANAGED BY RANCHER DESKTOP END (DO NOT EDIT)
alias meld='meld_script(){ /Applications/Meld.app/Contents/MacOS/Meld $* 2>/dev/null & };meld_script'
