" From http://unlogic.co.uk/2013/02/08/vim-as-a-python-ide/
set nocompatible                " This must be first, because it changes other options as a side effect
filetype off
syntax on
filetype plugin indent on

" Specify a directory for plugins
" - For Neovim: stdpath('data') . '/plugged'
" - Avoid using standard Vim directory names like 'plugin'
call plug#begin('~/.vim/plugged')
" Make SURE we're using /usr/local/bin/vim (brew installed and not OSX /usr/bin/vim
" Or hangups will happen
Plug 'flazz/vim-colorschemes'       " Colors
Plug 'Valloric/YouCompleteMe', { 'do': './install.py' }       " Auto-complete
Plug 'rking/ag.vim'                                           " Great Search (from Jacob shift-K)
Plug 'Lokaltog/powerline', {'rtp': 'powerline/bindings/vim/'} " Great looking bottom of vi
Plug 'tpope/vim-fugitive'                                     " Git integration
" Plugin outside ~/.vim/plugged with post-update hook
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' } " Fzf vim wrapper
Plug 'w0rp/ale'                     " Linting
Plug 'itchyny/lightline.vim'        " Lightweight status line
Plug 'sirver/ultisnips'                                       " Code completion
Plug 'fatih/vim-go', { 'do': ':GoUpdateBinaries' }            " GoLang development
"Bundle "godlygeek/tabular"
"" Nerdtree setup
"Bundle 'scrooloose/nerdtree'
"map <F2> :NERDTreeToggle<CR>

" Initialize plugin system
call plug#end()


set guifont=DejaVu\ Sans\ Mono\ for\ Powerline\ 9
let g:Powerline_symbols = 'fancy'
set encoding=utf-8
set t_Co=256
set fillchars+=stl:\ ,stlnc:\
set term=xterm-256color
set termencoding=utf-8
set laststatus=2

""""NEED TO SEE IF THESE SHOULD BE BROUGHT BACK IN"""""
function! _blockcomment()
" From http://unlogic.co.uk/2013/02/08/vim-as-a-python-ide/
set nocompatible
filetype off

" Golang setup
let g:go_fmt_command = "goimports"

"Plug 'flazz/vim-colorschemes'
"Plug 'vim-syntastic/syntastic'
"Plug 'ludovicchabant/vim-gutentags'       " Tag generation
"Plug 'neoclide/coc.nvim', {'branch':'release'}
"Plug 'neoclide/coc-python'
" Initialize plugin system
call plug#end()

" Powerline setup
set guifont=DejaVu\ Sans\ Mono\ for\ Powerline\ 9
let g:Powerline_symbols = 'fancy'
set encoding=utf-8
set t_Co=256
set fillchars+=stl:\ ,stlnc:\
set term=xterm-256color
set termencoding=utf-8
set laststatus=2

" The Silver Searcher
if executable('ag')
  " Use ag over grep
  set grepprg=ag\ --nogroup\ --nocolor

  " Use ag in CtrlP for listing files. Lightning fast and respects .gitignore
  let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""'

  " ag is fast enough that CtrlP doesn't need to cache
  let g:ctrlp_use_caching = 0
  let g:ag_prg="/usr/local/bin/ag --vimgrep"
  let g:ag_working_path_mode="r"
  " bind K (shift-k) to grep word under cursor
  nnoremap K :grep! "\b<C-R><C-W>\b"<CR>:cw<CR>
endif


" Python paths
let g:python_host_prog = '/usr/local/bin/python3'
let g:python3_host_prog = '/usr/local/bin/python3'

" If using tmux and iTerm2 on OSX, the following changes the cursor from a block to a cursor
" {{{
if exists('$TMUX')
  let &t_SI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=1\x7\<Esc>\\"
  let &t_EI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=0\x7\<Esc>\\"
else
  let &t_SI = "\<Esc>]50;CursorShape=1\x7"
  let &t_EI = "\<Esc>]50;CursorShape=0\x7"
endif
" }}}
endfunction
""""""""""""""""COMMENTED OUT ABOVE FOR NOW"""""""""""""""

" -----------
" Options
" -----------
""""JACOB ORIGINAL"""""
function! _jacoboriginalcomment()
set tabstop=2                   " Show existing tab with 2 spaces
set shiftwidth=2      		" When indenting with '>' use 2 spaces
set softtabstop=2               " number of spaces in tab when editing
set expandtab                   " On pressing tab insert 2 spaces
set updatetime=300              " You will have bad experience for diagnostic messages when it's default 4000.
set viewoptions=folds,options,cursor,unix,slash
set autoindent                  " set auto-indenting on for programming
set autoread                    " auto reload files in the buffer
set noswapfile                  " get rid of swap
set showmatch                   " automatically show matching brackets
set showcmd                     " show command in bottom bar
set cursorline                  " highlight current line
set ruler                       " show the cursor position all the time
set mouse=a                     " Enable mouse usage
set ttymouse=xterm2             " mouse codes from iTem that Vim will recognize
set guioptions+=a               " autoselect in gui mode
set backspace=indent,eol,start  " make that backspace key work the way it should
set showmode                    " show the current mode
set number                      " show line numbers
set history=1000                " store lots of :cmdline history
set hlsearch                    " highlight matches
set incsearch                   " search as characters are entered
set ignorecase                  " ignore case while searching
set smartcase                   " combined with 'ignorecase' search is only case sensitive when an upprercase letter is used
set wildmenu                    " visual autocomplete for command menu
set splitbelow                  " new horizontal split pane to the bottom
set splitright                  " new vertical split pane to the right
set t_Co=256                    " tell the term has 256 colors
set background=light            " Use colours that work well on a dark background (Console is usually black)
set timeoutlen=1000 ttimeoutlen=0 " Eliminate ESC delay - timeoutlen is used for mapping delays, and ttimeoutlen is used for key code delays
set laststatus=2                 " Show status line
set clipboard=unnamed            " Use clipboard register for everything except delete
set path+=**                     " Search down into subfolders
set wildmenu                     " Display all matching files when we tab complete
set rtp+=/usr/local/opt/fzf      " Enable fzf
set rtp+=~/.fzf                  " Enable fzf on Linux

" Leader is now space, using that for shortcuts
let mapleader = ' '

" -----------
" Mappings
" -----------
nmap <Leader>f :GFiles<CR> " Fzf files tracked by Git
nmap <Leader>F :Files<CR> " Fzf files in path
nmap <Leader>b :Buffers<CR> " Fzf buffers
nmap <Leader>a :ALEToggleBuffer<CR>  " Toggles lint/syntax
nmap <Leader>c :setlocal list!<CR>:setlocal list?<CR> " Toggle displaying all characters:
nmap <Leader>s :setlocal invspell<CR> " Toggle spellcheck
" TODO: Command history can be searched, but they're not executing
nmap <Leader>: :History:<CR>  " Fzf vim command history
nmap <Leader>h :History<CR>   " Fzf open file history
nmap <Leader>M :Maps<CR>      " Fzf browse shortcut mappings
nmap <Leader>' :Marks<CR>
nmap <Leader><Leader>h :Helptags!<CR>
" Search all files in path for string
nmap <Leader>/ :Ag<Space>
nmap <C-e> :e#<CR>     " Open previous buffer
nmap <Leader>e :e#<CR>     " Open previous buffer
nmap <C-n> :bnext<CR>  " Move between open buffers.
nmap <C-p> :bprev<CR>  " Move between open buffers.
nmap <Leader>q :q<CR>  " Quit
nmap <Leader>w :w<CR>  " Write
nmap <Leader>x :x<CR>  " Write Quit
" Open bash terminal
nmap <Leader>t :term bash<CR>

nmap <CR> o<Esc>       " Open lines, but stay in normal mode
nmap <Leader>j :ALENextWrap<CR>
nmap <Leader>k :ALEPreviousWrap<CR>

" Use different key mappings for easy navigation between splits to save a keystroke. Instead of ctrl-w then j, just ctrl-j "
nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>
nnoremap <C-H> <C-W><C-H>

" Left mouse click enters insert mode instead of visual
" map <LeftMouse> <LeftMouse>i
vnoremap . :norm.<CR> " Enable . in visual mode
nnoremap <Leader>, :nohlsearch<CR> " turn off search highlight
noremap U <C-R> " Redo with U instead of <C-R>
inoremap <S-Tab> <C-d> " Shift-Tab shift current line left 2 spaces in insert mode

""""""""""""""
" ************
" END Mappings
" ************
""""""""""""""

" -----
" ALE
" -----
let g:ale_sign_warning = '▲'
let g:ale_sign_error = '✗'
highlight link ALEWarningSign String
highlight link ALEErrorSign Title
augroup VimDiff
  autocmd!
  autocmd VimEnter,FilterWritePre * if &diff | ALEDisable | endif
augroup END


" Automatically load errors into the location list
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
"" Check for errors on open
let g:syntastic_check_on_open = 0
"" Check for errors on save
let g:syntastic_check_on_wq = 1
"" Syntastic debugger
let g:syntastic_debug = 0
"' Synastic ruby checker for Chef
let g:syntastic_ruby_checkers=['mri', 'rubocop']
" Ignore line longer than 79 chars error with flake8
let g:syntastic_python_flake8_args='--ignore=E501'
let g:syntastic_python_flake8_post_args='--ignore=E501'
let g:syntastic_python_checkers= ['flake8']

" Lightline
let g:lightline = {
\ 'colorscheme': 'PaperColor_light',
\ 'active': {
\   'left': [['relativepath', 'modified']],
\   'right': [['line_total'], ['percent'], ['column'], ['readonly', 'trailling_space', 'linter_warnings', 'linter_errors', 'linter_ok']]
\ },
\ 'component_expand': {
\   'linter_warnings': 'LightlineLinterWarnings',
\   'linter_errors': 'LightlineLinterErrors',
\   'linter_ok': 'LightlineLinterOK',
\   'trailling_space': 'StatuslineTrailingSpaceWarning',
\ },
\ 'component_type': {
\   'readonly': 'error',
\   'linter_warnings': 'warning',
\   'trailling_space': 'warning',
\   'linter_errors': 'error',
\ },
\ 'component': {
\   'line_total': '%L lines',
\ },
\ }

colors PaperColor

"========================================================================================================================"
" Status Line config
"========================================================================================================================"
"modified flag
set statusline=%#identifier#
set statusline+=%m
set statusline+=%*
set statusline+=%#PmenuSbar#
set statusline+=%{StatuslineGit()}
set statusline+=%*
set statusline+=\ %-20f\     "tail of the filename

"display a warning if fileformat isnt unix
set statusline+=%#warningmsg#
set statusline+=%{&ff!='unix'?'['.&ff.']':''}
set statusline+=%*

"display a warning if file encoding isnt utf-8
set statusline+=%#warningmsg#
set statusline+=%{(&fenc!='utf-8'&&&fenc!='')?'['.&fenc.']':''}
set statusline+=%*

set statusline+=%h      "help file flag

"read only flag
set statusline+=%#identifier#
set statusline+=%r
set statusline+=%*


"display a warning if &et is wrong, or we have mixed-indenting
set statusline+=%#error#
set statusline+=%{StatuslineTabWarning()}
set statusline+=%*

set statusline+=\ %{StatuslineCurrentHighlight()}\ \ "current highlight
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

"display a warning if &paste is set
set statusline+=%#error#
set statusline+=%{&paste?'[paste]':''}
set statusline+=%*

set statusline+=%=      "left/right separator
set statusline+=%#Pmenu#
set statusline+=\ %y      "filetype
set statusline+=\ %{&fileencoding?&fileencoding:&encoding}
set statusline+=\[%{&fileformat}\]\ 
set statusline+=%*
set statusline+=%#PmenuSbar#
set statusline+=\ %c,     "cursor column
set statusline+=%l/%L   "cursor line/total lines
set statusline+=\ %P\     "percent through file
set statusline+=%#identifier#
set statusline+=%{StatuslineTrailingSpaceWarning()}
set statusline+=%*

set laststatus=2

"minibufferexplorer settings
let g:miniBufExplModSelTarget = 1
let g:miniBufExplorerMoreThanOne = 0
let g:miniBufExplMapWindowNavArrows = 1
let g:miniBufExplUseSingleClick = 1
let g:miniBufExplMapWindowNavVim = 1
"let g:miniBufExplSplitBelow=1
"let g:miniBufExplVSplit = 30

"tslime
"vim-rspec
"let g:rspec_command = "!bundle exec zeus rspec -I . {spec}"
"let g:rspec_command = "Dispatch bundle exec zeus rspec -I . {spec}"
let g:rspec_command = "Dispatch exec zeus rspec -I . {spec}"
"let g:rspec_command = 'call Send_to_Tmux("bundle exec zeus rspec -I . {spec}\n")'

map <Leader>b :MiniBufExplorer<cr>

"display tabs and trailing spaces
set nolist
:autocmd ColorScheme * highlight ExtraWhitespace ctermbg=red guibg=red

"ctags
" set tags+=./tags;$HOME
set tags=./tags,tags;$HOME
let g:autotagTagsFile=".tags"

"recalculate the trailing whitespace warning when idle, and after saving
autocmd cursorhold,bufwritepost * unlet! b:statusline_trailing_space_warning

"return '[\s]' if trailing white space is detected
"return '' otherwise
function! StatuslineTrailingSpaceWarning()
  if !exists("b:statusline_trailing_space_warning")
    if !&modifiable
      let b:statusline_trailing_space_warning = ''
      return b:statusline_trailing_space_warning
    endif
    if search('\s\+$', 'nw') != 0
      let b:statusline_trailing_space_warning = '[\s]'
    else
      let b:statusline_trailing_space_warning = ''
    endif
  endif
 return b:statusline_trailing_space_warning
endfunction

" Update and show lightline but only if it's visible (e.g., not in Goyo)
function! s:MaybeUpdateLightline()
  if exists('#lightline')
    call lightline#update()
  end
endfunction

function! GitBranch()
  return system("git rev-parse --abbrev-ref HEAD 2>/dev/null | tr -d '\n'")
endfunction

function! StatuslineGit()
  let l:branchname = GitBranch()
  return strlen(l:branchname) > 0?'  '.l:branchname.' ':''
endfunction


" Update the lightline scheme from the colorscheme. Hopefully.
function! s:UpdateLightlineColorScheme()
  let g:lightline.colorscheme = g:colors_name
  call lightline#init()
endfunction

augroup _lightline
  autocmd!
  autocmd User ALELint call s:MaybeUpdateLightline()
  autocmd ColorScheme * call s:UpdateLightlineColorScheme()
augroup END

"return the syntax highlight group under the cursor ''
function! StatuslineCurrentHighlight()
  let name = synIDattr(synID(line('.'),col('.'),1),'name')
  if name == ''
    return ''
  else
    return '[' . name . ']'
  endif
endfunction

"recalculate the tab warning flag when idle and after writing
autocmd cursorhold,bufwritepost * unlet! b:statusline_tab_warning

"return '[&et]' if &et is set wrong
"return '[mixed-indenting]' if spaces and tabs are used to indent
"return an empty string if everything is fine
function! StatuslineTabWarning()
  if !exists("b:statusline_tab_warning")
    let b:statusline_tab_warning = ''
    if !&modifiable
      return b:statusline_tab_warning
    endif
    let tabs = search('^\t', 'nw') != 0
    "find spaces that arent used as alignment in the first indent column
    let spaces = search('^ \{' . &ts . ',}[^\t]', 'nw') != 0
    if tabs && spaces
      let b:statusline_tab_warning =  '[mixed-indenting]'
    elseif (spaces && !&et) || (tabs && &et)
      let b:statusline_tab_warning = '[&et]'
    endif
  endif
endfunction


endfunction
""""""""""""""""COMMENTED OUT ABOVE FOR NOW"""""""""""""""
